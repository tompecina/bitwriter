<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:annotation>
    <xs:documentation>
      XML Schema pro BIN, version 1.0
      URL: http://www.pecina.cz/xsd/bin-1.0.xsd
      Author: Tomáš Pecina, tomas@pecina.cz
      License: GNU General Public License
    </xs:documentation>
  </xs:annotation>
  
  <xs:annotation>
    <xs:documentation>
      Containers
    </xs:documentation>
  </xs:annotation>

  <xs:element name="file">
    <xs:complexType>
      <xs:complexContent>
	<xs:extension base="base-loop">
	  <xs:attribute name="version" use="required" type="xs:NMTOKEN" fixed="1.0"/>
	</xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="loop">
    <xs:complexType>
      <xs:complexContent>
	<xs:extension base="base-loop">
	  <xs:attribute name="repeat" type="nonNegativeIntegerOrScript" default="1"/>
	</xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:complexType name="base-loop">
    <xs:choice maxOccurs="unbounded">
      <xs:element ref="stream"/>
      <xs:group ref="freeVariable"/>
      <xs:element ref="loop"/>
      <xs:element ref="script"/>
    </xs:choice>
  </xs:complexType>

  <xs:element name="seq" type="seq"/>
  
  <xs:complexType name="seq" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="variable"/>
      <xs:element name="hex" type="radix"/>
      <xs:element name="dec" type="radix"/>
      <xs:element name="oct" type="radix"/>
      <xs:element name="bin" type="radix"/>
      <xs:element name="bits" type="radix"/>
      <xs:element name="float" type="radix"/>
      <xs:element name="double" type="radix"/>
      <xs:element name="text" type="text"/>
      <xs:element ref="random"/>
      <xs:element ref="include"/>
      <xs:element ref="seq"/>
      <xs:element ref="flush"/>
      <xs:element ref="script"/>
    </xs:choice>
    <xs:attribute name="repeat" type="nonNegativeIntegerOrScript" default="1"/>
  </xs:complexType>

  <xs:element name="stream">
    <xs:complexType mixed="true">
      <xs:complexContent>
	<xs:extension base="seq">
	  <xs:attribute name="width-in" type="positiveIntegerOrScript" default="8"/>
	  <xs:attribute name="width-out" type="positiveIntegerOrScript" default="8"/>
	  <xs:attribute name="endianness-in" type="endiannessOrScript" default="big"/>
	  <xs:attribute name="endianness-out" type="endiannessOrScript" default="big"/>
	  <xs:attribute name="width-aggregate-in" type="positiveIntegerOrScript" default="8"/>
	  <xs:attribute name="width-aggregate-out" type="positiveIntegerOrScript" default="8"/>
	  <xs:attribute name="reflect-in" type="booleanOrScript" default="false"/>
	  <xs:attribute name="reflect-out" type="booleanOrScript" default="false"/>
	  <xs:attribute name="discard" type="booleanOrScript" default="false"/>
	</xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="radix" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="variable"/>
      <xs:element ref="flush"/>
      <xs:element ref="script"/>
    </xs:choice>
    <xs:attribute name="repeat" type="nonNegativeIntegerOrScript" default="1"/>
  </xs:complexType>

  <xs:complexType name="text" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="variable"/>
      <xs:element ref="flush"/>
      <xs:element ref="script"/>
    </xs:choice>
    <xs:attribute name="repeat" type="nonNegativeIntegerOrScript" default="1"/>
    <xs:attribute name="trim" type="booleanOrScript" default="true"/>
    <xs:attribute name="charset" type="tokenOrScript" default="UTF-8"/>
  </xs:complexType>

  <xs:annotation>
    <xs:documentation>
      Variable elements
    </xs:documentation>
  </xs:annotation>

  <xs:group name="variable">
    <xs:choice>
      <xs:group ref="freeVariable"/>
      <xs:group ref="boundVariable"/>
    </xs:choice>
  </xs:group>
  
  <xs:group name="freeVariable">
    <xs:choice>
      <xs:element ref="set"/>
      <xs:element ref="reset"/>
      <xs:element ref="show"/>
      <xs:element ref="release"/>
      <xs:element ref="crc"/>
      <xs:element ref="parity"/>
      <xs:element ref="sum"/>
      <xs:element ref="digest"/>
    </xs:choice>
  </xs:group>
  
  <xs:group name="boundVariable">
    <xs:choice>
      <xs:element ref="put"/>
    </xs:choice>
  </xs:group>

  <xs:complexType name="variable">
    <xs:attribute name="name" use="required" type="variableNameOrScript"/>
  </xs:complexType>

  <xs:element name="set">
    <xs:complexType>
      <xs:complexContent>
  	<xs:extension base="variable">
  	  <xs:attribute name="value" type="integerOrScript"/>
  	  <xs:attribute name="on-stream-in" type="emptyOrIntegerOrScript"/>
  	  <xs:attribute name="on-aggregate-stream-in" type="emptyOrIntegerOrScript"/>
  	  <xs:attribute name="on-bitstream" type="emptyOrIntegerOrScript"/>
  	  <xs:attribute name="on-aggregate-stream-out" type="emptyOrIntegerOrScript"/>
  	  <xs:attribute name="on-stream-out" type="emptyOrIntegerOrScript"/>
  	  <xs:attribute name="on-output-stream" type="emptyOrIntegerOrScript"/>
  	</xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="reset" type="variable"/>

  <xs:element name="release" type="variable"/>

  <xs:element name="put">
    <xs:complexType>
      <xs:attribute name="name" type="variableNameOrScript"/>
      <xs:attribute name="value" type="integerOrScript"/>
      <xs:attribute name="type" type="variableTypeOrScript" default="stream-in"/>
      <xs:attribute name="reset" type="booleanOrScript" default="true"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="show">
    <xs:complexType>
      <xs:attribute name="name" type="variableNameOrScript"/>
      <xs:attribute name="value" type="integerOrScript"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="parity">
    <xs:complexType>
      <xs:complexContent>
  	<xs:extension base="variable">
  	  <xs:attribute name="type" type="variableTypeOrScript" default="bitstream"/>
  	  <xs:attribute name="model" type="parityModelOrScript" default="odd"/>
  	</xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="sum">
    <xs:complexType>
      <xs:complexContent>
  	<xs:extension base="variable">
  	  <xs:attribute name="type" type="variableTypeOrScript" default="stream-out"/>
  	  <xs:attribute name="width" type="positiveIntegerOrScript" default="8"/>
  	  <xs:attribute name="xor-in" type="integerOrScript" default="0"/>
  	  <xs:attribute name="xor-out" type="integerOrScript" default="0"/>
  	</xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="crc">
    <xs:complexType>
      <xs:complexContent>
  	<xs:extension base="variable">
  	  <xs:attribute name="type" type="variableTypeOrScript" default="stream-out"/>
  	  <xs:attribute name="model" type="tokenOrScript"/>
	  <xs:attribute name="notation" type="notationOrScript" default="normal"/>
  	  <xs:attribute name="width" type="positiveIntegerOrScript"/>
  	  <xs:attribute name="polynomial" type="positiveIntegerOrScript"/>
  	  <xs:attribute name="reflect-in" type="booleanOrScript" default="true"/>
  	  <xs:attribute name="xor-in" type="integerOrScript" default="-1"/>
  	  <xs:attribute name="reflect-out" type="booleanOrScript" default="true"/>
  	  <xs:attribute name="xor-out" type="integerOrScript" default="0"/>
  	</xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="digest">
    <xs:complexType>
      <xs:complexContent>
  	<xs:extension base="variable">
  	  <xs:attribute name="type" type="variableTypeOrScript" default="stream-out"/>
  	  <xs:attribute name="model" use="required" type="tokenOrScript"/>
  	</xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:annotation>
    <xs:documentation>
      Miscellaneous elements
    </xs:documentation>
  </xs:annotation>

  <xs:element name="flush" type="empty"/>

  <xs:element name="script">
    <xs:complexType>
      <xs:simpleContent>
	<xs:extension base="unmarkedScript">
	  <xs:attribute name="repeat" type="nonNegativeIntegerOrScript" default="1"/>
	</xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="random">
    <xs:complexType>
      <xs:attribute name="width" type="positiveIntegerOrScript" default="8"/>
      <xs:attribute name="length" type="nonNegativeIntegerOrScript" default="1"/>
      <xs:attribute name="seed" type="integerOrScript" default="0"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="include">
    <xs:complexType>
      <xs:attribute name="repeat" type="nonNegativeIntegerOrScript" default="1"/>
      <xs:attribute name="location" use="required" type="tokenOrScript"/>
      <xs:attribute name="offset" type="nonNegativeIntegerOrScript" default="0"/>
      <xs:attribute name="length" type="nonNegativeIntegerOrScript" default="9223372036854775807"/>
    </xs:complexType>
  </xs:element>

  <xs:annotation>
    <xs:documentation>
      Types
    </xs:documentation>
  </xs:annotation>

  <xs:simpleType name="empty">
    <xs:restriction base="xs:string">
      <xs:enumeration value=""/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="integer">
    <xs:union memberTypes="hexInteger decInteger octInteger binInteger"/>
  </xs:simpleType>

  <xs:simpleType name="positiveInteger">
    <xs:union memberTypes="positiveHexInteger positiveDecInteger positiveOctInteger positiveBinInteger"/>
  </xs:simpleType>

  <xs:simpleType name="nonPositiveInteger">
    <xs:union memberTypes="zero negativeInteger"/>
  </xs:simpleType>

  <xs:simpleType name="zero">
    <xs:union memberTypes="hexZero decZero octZero binZero"/>
  </xs:simpleType>

  <xs:simpleType name="negativeInteger">
    <xs:union memberTypes="negativeHexInteger negativeDecInteger negativeOctInteger negativeBinInteger"/>
  </xs:simpleType>

  <xs:simpleType name="nonNegativeInteger">
    <xs:union memberTypes="zero positiveInteger"/>
  </xs:simpleType>

  <xs:simpleType name="hexInteger">
    <xs:union memberTypes="positiveHexInteger hexZero negativeHexInteger"/>
  </xs:simpleType>

  <xs:simpleType name="positiveHexInteger">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="\+?0[xX]0*[1-9a-fA-F]+[0-9a-fA-F]*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="hexZero">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="[-+]?0[xX]0+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="negativeHexInteger">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="-0[xX]0*[1-9a-fA-F]+[0-9a-fA-F]*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="decInteger">
    <xs:union memberTypes="positiveDecInteger decZero negativeDecInteger"/>
  </xs:simpleType>
  
  <xs:simpleType name="positiveDecInteger">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="\+?[1-9]\d*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="decZero">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="[-+]?0"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="negativeDecInteger">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="-[1-9]\d*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="octInteger">
    <xs:union memberTypes="positiveOctInteger octZero negativeOctInteger"/>
  </xs:simpleType>
  
  <xs:simpleType name="positiveOctInteger">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="\+?0+[1-7][0-7]*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="octZero">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="[-+]?0{2,}"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="negativeOctInteger">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="-0+[1-7][0-7]*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="binInteger">
    <xs:union memberTypes="positiveBinInteger binZero negativeBinInteger"/>
  </xs:simpleType>

  <xs:simpleType name="positiveBinInteger">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="\+?0[bB]0*1[01]*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="binZero">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="[-+]?0[bB]0+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="negativeBinInteger">
    <xs:restriction base="xs:NMTOKEN">
      <xs:pattern value="-0[bB]0*1[01]*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="unmarkedScript">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  
  <xs:simpleType name="markedScript">
    <xs:restriction base="xs:string">
      <xs:pattern value="\s*\{\{.*\}\}\s*"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="integerOrScript">
    <xs:union memberTypes="integer markedScript"/>
  </xs:simpleType>
  
  <xs:simpleType name="nonNegativeIntegerOrScript">
    <xs:union memberTypes="nonNegativeInteger markedScript"/>
  </xs:simpleType>

  <xs:simpleType name="positiveIntegerOrScript">
    <xs:union memberTypes="positiveInteger markedScript"/>
  </xs:simpleType>
  
  <xs:simpleType name="booleanOrScript">
    <xs:union memberTypes="xs:boolean markedScript"/>
  </xs:simpleType>

  <xs:simpleType name="endianness">
    <xs:restriction base="xs:NCName">
      <xs:enumeration value="big"/>
      <xs:enumeration value="little"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="endiannessOrScript">
    <xs:union memberTypes="endianness markedScript"/>
  </xs:simpleType>
  
  <xs:simpleType name="variableName">
    <xs:restriction base="xs:token">
      <xs:pattern value="[a-zA-Z_$][a-zA-Z\d_$]*"/>
    </xs:restriction>
  </xs:simpleType>
    
  <xs:simpleType name="variableNameOrScript">
    <xs:union memberTypes="variableName markedScript"/>
  </xs:simpleType>

  <xs:simpleType name="variableType">
    <xs:restriction base="xs:NCName">
      <xs:enumeration value="stream-in"/>
      <xs:enumeration value="aggregate-stream-in"/>
      <xs:enumeration value="bitstream"/>
      <xs:enumeration value="aggregate-stream-out"/>
      <xs:enumeration value="stream-out"/>
      <xs:enumeration value="output-stream"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="variableTypeOrScript">
    <xs:union memberTypes="variableType markedScript"/>
  </xs:simpleType>
  
  <xs:simpleType name="tokenOrScript">
    <xs:union memberTypes="xs:token markedScript"/>
  </xs:simpleType>
  
  <xs:simpleType name="parityModel">
    <xs:restriction base="xs:NCName">
      <xs:enumeration value="even"/>
      <xs:enumeration value="odd"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="parityModelOrScript">
    <xs:union memberTypes="parityModel markedScript"/>
  </xs:simpleType>

  <xs:simpleType name="emptyOrIntegerOrScript">
    <xs:union memberTypes="empty integer markedScript"/>
  </xs:simpleType>

  <xs:simpleType name="notation">
    <xs:restriction base="xs:NCName">
      <xs:enumeration value="normal"/>
      <xs:enumeration value="full"/>
      <xs:enumeration value="reversed"/>
      <xs:enumeration value="koopman"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="notationOrScript">
    <xs:union memberTypes="notation markedScript"/>
  </xs:simpleType>
  
</xs:schema>
